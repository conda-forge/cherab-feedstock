--- a/cherab/tools/observers/bolometry.py
+++ b/cherab/tools/observers/bolometry.py
@@ -22,12 +22,12 @@ import functools
 import numpy as np

 from raysect.core import Node, translate, rotate_basis, Point3D, Vector3D, Ray as CoreRay, Primitive, World
-from raysect.core.math.sampler import TargettedHemisphereSampler, RectangleSampler3D
+from raysect.core.math.sampler import TargetedHemisphereSampler, RectangleSampler3D
 from raysect.primitive import Box, Cylinder, Subtract, Union
 from raysect.optical.observer import PowerPipeline0D, RadiancePipeline0D, \
-    SpectralPowerPipeline0D, SpectralRadiancePipeline0D, SightLine, TargettedPixel
+    SpectralPowerPipeline0D, SpectralRadiancePipeline0D, SightLine, TargetedPixel
 from raysect.optical.observer import PowerPipeline2D, RadiancePipeline2D, \
-    SpectralPowerPipeline2D, SpectralRadiancePipeline2D, TargettedCCDArray
+    SpectralPowerPipeline2D, SpectralRadiancePipeline2D, TargetedCCDArray
 from raysect.optical.material.material import NullMaterial
 from raysect.optical.material import AbsorbingSurface

@@ -351,7 +351,7 @@ class BolometerSlit(Node):
         return self._curvature_radius


-class BolometerFoil(TargettedPixel):
+class BolometerFoil(TargetedPixel):
     """
     A rectangular foil bolometer detector.

@@ -447,7 +447,7 @@ class BolometerFoil(TargettedPixel):
         translation = translate(centre_point.x, centre_point.y, centre_point.z)
         rotation = rotate_basis(normal_vec, basis_y)

-        super().__init__([slit.target], targetted_path_prob=1.0,
+        super().__init__([slit.target], targeted_path_prob=1.0,
                          pixel_samples=1000, x_width=dx, y_width=dy, spectral_bins=1, quiet=True,
                          parent=parent, transform=translation * rotation, name=detector_id)

@@ -662,7 +662,7 @@ class BolometerFoil(TargettedPixel):
         sphere = target.bounding_sphere()
         spheres = [(sphere.centre.transform(self.to_local()), sphere.radius, 1.0)]
         # instance targetted pixel sampler to sample directions
-        targetted_sampler = TargettedHemisphereSampler(spheres)
+        targetted_sampler = TargetedHemisphereSampler(spheres)
         # instance rectangle pixel sampler to sample origins
         point_sampler = RectangleSampler3D(width=self.x_width, height=self.y_width)

@@ -701,7 +701,7 @@ class BolometerFoil(TargettedPixel):
         return etendue, etendue_error


-class BolometerIRVB(TargettedCCDArray):
+class BolometerIRVB(TargetedCCDArray):
     """
     A rectangular infra red video bolometer (IRVB).

@@ -784,7 +784,7 @@ class BolometerIRVB(TargettedCCDArray):
         self._accumulate = None  # Will be set after pipeline is created.

         super().__init__([slit.target], pixels=pixels, width=width,
-                         targetted_path_prob=0.99, parent=parent, pipelines=[],
+                         targeted_path_prob=0.99, parent=parent, pipelines=[],
                          transform=transform, name=name)
         self.pixel_samples = 1000
         self.spectral_bins = 1
--- a/cherab/tools/observers/group/targettedpixel.py
+++ b/cherab/tools/observers/group/targettedpixel.py
@@ -17,14 +17,14 @@
 # under the Licence.

 from numpy import ndarray
-from raysect.optical.observer import TargettedPixel
+from raysect.optical.observer import TargetedPixel

 from .base import Observer0DGroup


 class TargettedPixelGroup(Observer0DGroup):
     """
-    A group of targetted pixel under a single scene-graph node.
+    A group of targeted pixel under a single scene-graph node.

     A scene-graph object regrouping a series of 'TargettedPixel'
     observers as a scene-graph parent. Allows combined observation and display
@@ -33,9 +33,10 @@ class TargettedPixelGroup(Observer0DGroup):
     :ivar list x_width: Width of pixel along local x axis
     :ivar list y_width: Width of pixel along local y axis
     :ivar list targets: Targets for preferential sampling
-    :ivar list targetted_path_prob: Probability of ray being casted at the target
+    :ivar list targeted_path_prob: Probability of ray being casted at the target
     """
-    _OBSERVER_TYPE = TargettedPixel
+
+    _OBSERVER_TYPE = TargetedPixel

     @property
     def x_width(self):
@@ -76,7 +77,7 @@ class TargettedPixelGroup(Observer0DGroup):
         """
         List of target lists used by pixels for preferential sampling

-        :param list value: List of primitives to be set to each pixel or
+        :param list value: List of primitives to be set to each pixel or
                            list of lists containing targets specific for each pixel
                            in this case the number of lists must match number of pixels

@@ -99,18 +100,17 @@ class TargettedPixelGroup(Observer0DGroup):
                 pixel.targets = value

     @property
-    def targetted_path_prob(self):
-        return [pixel.targetted_path_prob for pixel in self._observers]
-
-    @targetted_path_prob.setter
-    def targetted_path_prob(self, value):
+    def targeted_path_prob(self):
+        return [pixel.targeted_path_prob for pixel in self._observers]
+
+    @targeted_path_prob.setter
+    def targeted_path_prob(self, value):
         if isinstance(value, (list, tuple)):
             if len(value) == len(self._observers):
                 for pixel, v in zip(self._observers, value):
-                    pixel.targetted_path_prob = v
+                    pixel.targeted_path_prob = v
             else:
-                raise ValueError("The length of 'value' ({}) "
-                                 "mismatches the number of pixels ({}).".format(len(value), len(self._observers)))
+                raise ValueError("The length of 'value' ({}) mismatches the number of pixels ({}).".format(len(value), len(self._observers)))
         else:
             for pixel in self._observers:
-                pixel.targetted_path_prob = value
+                pixel.targeted_path_prob = value
--- a/cherab/tools/tests/test_observer_groups.py
+++ b/cherab/tools/tests/test_observer_groups.py
@@ -1,7 +1,7 @@
 import unittest

 from raysect.core.workflow import RenderEngine
-from raysect.optical.observer import Observer0D, SightLine, FibreOptic, Pixel, TargettedPixel, PowerPipeline0D, SpectralPowerPipeline0D
+from raysect.optical.observer import Observer0D, SightLine, FibreOptic, Pixel, TargetedPixel, PowerPipeline0D, SpectralPowerPipeline0D
 from raysect.primitive import Sphere

 from cherab.tools.observers.group.base import Observer0DGroup
@@ -352,7 +352,7 @@ class TargettedPixelGroupTestCase(PixelGroupTestCase):
     _GROUP_CLASS = TargettedPixelGroup

     def setUp(self):
-        self.observers = [TargettedPixel(targets=[Sphere()], pipelines=[PowerPipeline0D()]) for _ in range(self._NUM)]
+        self.observers = [TargetedPixel(targets=[Sphere()], pipelines=[PowerPipeline0D()]) for _ in range(self._NUM)]

     def test_targets(self):
         group = self._GROUP_CLASS(observers=self.observers)
@@ -376,13 +376,13 @@ class TargettedPixelGroupTestCase(PixelGroupTestCase):

         # targetted path prob
         prob = [0.9, 0.95, 1]
-        group.targetted_path_prob = prob
-        self.assertListEqual(group.targetted_path_prob, prob)
+        group.targeted_path_prob = prob
+        self.assertListEqual(group.targeted_path_prob, prob)

         prob = 0.8
-        group.targetted_path_prob = prob
-        for group_targetted_path_prob in group.targetted_path_prob:
-            self.assertEqual(group_targetted_path_prob, prob)
+        group.targeted_path_prob = prob
+        for group_targeted_path_prob in group.targeted_path_prob:
+            self.assertEqual(group_targeted_path_prob, prob)

         with self.assertRaises(ValueError):
-            group.targetted_path_prob = [0.7] * (len(group) + 1)
+            group.targeted_path_prob = [0.7] * (len(group) + 1)
