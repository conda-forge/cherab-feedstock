--- a/cherab/tools/observers/bolometry.py
+++ b/cherab/tools/observers/bolometry.py
@@ -22,12 +22,12 @@ import functools
 import numpy as np

 from raysect.core import Node, translate, rotate_basis, Point3D, Vector3D, Ray as CoreRay, Primitive, World
-from raysect.core.math.sampler import TargettedHemisphereSampler, RectangleSampler3D
+from raysect.core.math.sampler import TargetedHemisphereSampler, RectangleSampler3D
 from raysect.primitive import Box, Cylinder, Subtract, Union
 from raysect.optical.observer import PowerPipeline0D, RadiancePipeline0D, \
-    SpectralPowerPipeline0D, SpectralRadiancePipeline0D, SightLine, TargettedPixel
+    SpectralPowerPipeline0D, SpectralRadiancePipeline0D, SightLine, TargetedPixel
 from raysect.optical.observer import PowerPipeline2D, RadiancePipeline2D, \
-    SpectralPowerPipeline2D, SpectralRadiancePipeline2D, TargettedCCDArray
+    SpectralPowerPipeline2D, SpectralRadiancePipeline2D, TargetedCCDArray
 from raysect.optical.material.material import NullMaterial
 from raysect.optical.material import AbsorbingSurface

@@ -351,7 +351,7 @@ class BolometerSlit(Node):
         return self._curvature_radius


-class BolometerFoil(TargettedPixel):
+class BolometerFoil(TargetedPixel):
     """
     A rectangular foil bolometer detector.

@@ -662,7 +662,7 @@ class BolometerFoil(TargettedPixel):
         sphere = target.bounding_sphere()
         spheres = [(sphere.centre.transform(self.to_local()), sphere.radius, 1.0)]
         # instance targetted pixel sampler to sample directions
-        targetted_sampler = TargettedHemisphereSampler(spheres)
+        targetted_sampler = TargetedHemisphereSampler(spheres)
         # instance rectangle pixel sampler to sample origins
         point_sampler = RectangleSampler3D(width=self.x_width, height=self.y_width)

@@ -701,7 +701,7 @@ class BolometerFoil(TargettedPixel):
         return etendue, etendue_error


-class BolometerIRVB(TargettedCCDArray):
+class BolometerIRVB(TargetedCCDArray):
     """
     A rectangular infra red video bolometer (IRVB).

--- a/cherab/tools/observers/group/targettedpixel.py
+++ b/cherab/tools/observers/group/targettedpixel.py
@@ -17,7 +17,7 @@
 # under the Licence.

 from numpy import ndarray
-from raysect.optical.observer import TargettedPixel
+from raysect.optical.observer import TargetedPixel

 from .base import Observer0DGroup

@@ -35,7 +35,8 @@ class TargettedPixelGroup(Observer0DGroup):
     :ivar list targets: Targets for preferential sampling
     :ivar list targetted_path_prob: Probability of ray being casted at the target
     """
-    _OBSERVER_TYPE = TargettedPixel
+
+    _OBSERVER_TYPE = TargetedPixel

     @property
     def x_width(self):
--- a/cherab/tools/tests/test_observer_groups.py
+++ b/cherab/tools/tests/test_observer_groups.py
@@ -1,7 +1,7 @@
 import unittest

 from raysect.core.workflow import RenderEngine
-from raysect.optical.observer import Observer0D, SightLine, FibreOptic, Pixel, TargettedPixel, PowerPipeline0D, SpectralPowerPipeline0D
+from raysect.optical.observer import Observer0D, SightLine, FibreOptic, Pixel, TargetedPixel, PowerPipeline0D, SpectralPowerPipeline0D
 from raysect.primitive import Sphere

 from cherab.tools.observers.group.base import Observer0DGroup
